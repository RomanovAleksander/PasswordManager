{"version":3,"sources":["components/App/App.js","serviceWorker.js","index.js"],"names":["App","state","className","tabIndex","id","name","type","size","autoComplete","maxLength","placeholder","readOnly","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"mQAgDeA,E,kDA5Cb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,GAFD,E,0CAOd,WACE,OACE,qBAAKC,UAAU,YAAf,SACE,sBAAKA,UAAU,OAAf,UACE,sBAAKA,UAAU,cAAf,UACE,sBAAKA,UAAU,6BAA6BC,SAAS,IAAIC,GAAG,kBAA5D,UACE,mBAAGF,UAAU,4BACb,qBAAKA,UAAU,kBAAf,qBAEF,sBAAKA,UAAU,4BAA4BC,SAAS,IAAIC,GAAG,iBAA3D,UACE,mBAAGF,UAAU,4BACb,qBAAKA,UAAU,kBAAf,oBAEF,sBAAKA,UAAU,iCAAiCC,SAAS,KAAKC,GAAG,sBAAjE,UACE,mBAAGF,UAAU,4BACb,qBAAKA,UAAU,kBAAf,4BAGJ,qBAAKA,UAAU,kBAAf,SACE,sBAAKA,UAAU,wBAAf,UACE,uBAAOA,UAAU,mBAAmBG,KAAK,WAAWC,KAAK,WAAWC,KAAK,KAAKC,aAAa,eACpFC,UAAU,OAAOC,YAAY,uBAAuBC,SAAS,GAAGR,SAAS,OAC9E,sBAAKD,UAAU,uBAAuBC,SAAS,KAA/C,UACE,mBAAGD,UAAU,+DACb,mBAAGA,UAAU,0E,GAhCbU,IAAMC,WCSlBC,G,MAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,4DAqCnC,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB5B,QACfsB,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,+GAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,WAO5BU,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,MCvFjEC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,QDa1C,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,mBAAwB5B,OAAOC,SAAS4B,MACpDC,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,QAAQ,WAC9B,IAAM1B,EAAK,UAAMuB,mBAAN,sBAEP9B,IAgEV,SAAiCO,EAAOC,GAEtC0B,MAAM3B,EAAO,CACX4B,QAAS,CAAE,iBAAkB,YAE5BvB,MAAK,SAACwB,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C/B,UAAUC,cAAc+B,MAAM7B,MAAK,SAACC,GAClCA,EAAa6B,aAAa9B,MAAK,WAC7BV,OAAOC,SAASwC,eAKpBrC,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IAAI,oEAtFVwB,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAM7B,MAAK,WACjCO,QAAQC,IACN,+GAMJd,EAAgBC,EAAOC,OCpC/BE,K","file":"static/js/main.06c0287c.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"app__body\">\n        <div className=\"open\">\n          <div className=\"open__icons\">\n            <div className=\"open__icon open__icon-open\" tabIndex=\"1\" id=\"open__icon-open\">\n              <i className=\"fa fa-lock open__icon-i\"></i>\n              <div className=\"open__icon-text\">Open</div>\n            </div>\n            <div className=\"open__icon open__icon-new\" tabIndex=\"2\" id=\"open__icon-new\">\n              <i className=\"fa fa-plus open__icon-i\"></i>\n              <div className=\"open__icon-text\">New</div>\n            </div>\n            <div className=\"open__icon open__icon-generate\" tabIndex=\"21\" id=\"open__icon-generate\">\n              <i className=\"fa fa-bolt open__icon-i\"></i>\n              <div className=\"open__icon-text\">Generate</div>\n            </div>\n          </div>\n          <div className=\"open__pass-area\">\n            <div className=\"open__pass-field-wrap\">\n              <input className=\"open__pass-input\" name=\"password\" type=\"password\" size=\"30\" autoComplete=\"new-password\"\n                     maxLength=\"1024\" placeholder=\"Click to open a file\" readOnly=\"\" tabIndex=\"23\" />\n                <div className=\"open__pass-enter-btn\" tabIndex=\"24\">\n                  <i className=\"fa fa-level-down rotate-90 open__pass-enter-btn-icon-enter\"></i>\n                  <i className=\"fa fa-fingerprint open__pass-enter-btn-icon-touch-id\"></i>\n                </div>\n                {/*<div className=\"open__pass-opening-icon\">*/}\n                {/*  <i className=\"fa fa-spinner spin\"></i>*/}\n                {/*</div>*/}\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport 'font-awesome/css/font-awesome.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('app'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.register();\n"],"sourceRoot":""}