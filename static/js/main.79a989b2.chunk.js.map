{"version":3,"sources":["actions/signin/types.js","services/LocalStorageService.js","components/FormButton/FormButton.js","components/FormButtons/FormButtons.js","components/LoginForm/LoginForm.js","actions/signin/actions.js","components/App/App.js","serviceWorker.js","reducers/authorization.js","reducers/index.js","store.js","index.js"],"names":["SIGN_IN_REQUEST","SIGN_IN_SUCCESS","SIGN_IN_FAILURE","SIGN_OUT","LocalStorage","instance","this","key","JSON","parse","localStorage","getItem","value","setItem","stringify","FormButton","selectButton","e","setState","active","target","id","props","changeButton","state","icon","button","type","name","onChange","required","className","htmlFor","React","Component","FormButtons","handleChange","onButtonChange","buttons","map","LoginForm","password","onSubmit","preventDefault","signInRequest","signInSuccess","console","log","LocalStorageService","isPassword","size","autoComplete","maxLength","placeholder","readOnly","tabIndex","mapDispatchToProps","user","payload","signInError","error","connect","isAuthorized","userData","loading","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","initialState","reducer","combineReducers","action","undefined","clear","store","createStore","composeWithDevTools","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.79a989b2.chunk.js","sourcesContent":["export const SIGN_IN_REQUEST = 'SIGN_IN_REQUEST';\nexport const SIGN_IN_SUCCESS = 'SIGN_IN_SUCCESS';\nexport const SIGN_IN_FAILURE = 'SIGN_IN_FAILURE';\nexport const SIGN_OUT = 'SIGN_OUT';\n","class LocalStorage {\n  constructor() {\n    if (LocalStorage.instance) {\n      return LocalStorage.instance\n    }\n    LocalStorage.instance = this;\n    return this;\n  }\n\n  getItem(key) {\n    return JSON.parse(localStorage.getItem(`${key}`));\n  }\n\n  setItem(key, value) {\n    return localStorage.setItem(`${key}`, JSON.stringify(value));\n  }\n}\n\nexport default new LocalStorage();\n","import React from 'react';\n\nexport class FormButton extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      active: ''\n    }\n  }\n\n  selectButton = (e) => {\n    this.setState({\n      active: e.target.id\n    });\n\n    this.props.changeButton(e);\n  };\n\n  render() {\n    const { button } = this.props;\n\n    const selectIcon = (icon) => {\n      if (icon === 'open') {\n        return 'fa-lock'\n      } else if (icon === 'new') {\n        return 'fa-plus'\n      } else if (icon === 'generate') {\n        return 'fa-bolt'\n      }\n    };\n\n    return (\n      <>\n        <input id={button} type=\"radio\" value={button} name=\"category\"\n               onChange={this.selectButton} required\n        />\n          <label className=\"\" htmlFor={button}>\n            <i className={`fa ${selectIcon(button)} open__icon-i`}> </i>\n            <div className=\"open__icon-text\">{button}</div>\n          </label>\n      </>\n    )\n  }\n}\n","import React from 'react';\nimport { FormButton } from '../FormButton';\n\nexport default class FormButtons extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      button: ''\n    }\n  }\n\n  handleChange = (e) => {\n    const { onButtonChange } = this.props;\n    const button = e.target.value;\n    this.setState({ button });\n    onButtonChange(button);\n  };\n\n  render() {\n    const { buttons } = this.props;\n    return (\n      <div className=\"open__icons\">\n        {\n          buttons.map((button) => {\n            return (\n              <div className=\"open__icon open__icon-open\" key={button}>\n                <FormButton button={button} changeButton={this.handleChange} key={button}/>\n              </div>\n            )\n          })\n        }\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { signInRequest, signInSuccess, signInError } from '../../actions/signin/actions';\nimport { LocalStorageService }  from '../../services';\nimport './loginForm.css';\nimport {FormButtons} from \"../FormButtons\";\n\nclass LoginForm extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      button: 'new',\n      password: '',\n      isPassword: false\n    }\n  }\n\n  onChange = ({ target }) => {\n    this.setState({\n      password: target.value\n    });\n  };\n\n  onButtonChange = (button) => {\n    this.setState({ button });\n  };\n\n  onSubmit = (e) => {\n    e.preventDefault();\n    const { password } = this.state;\n    const { signInRequest, signInSuccess } = this.props;\n\n    const { button } = this.state;\n\n    switch (button) {\n      case 'open':\n        console.log('open file')\n        break;\n      case 'new':\n        signInRequest();\n        signInSuccess(password);\n        LocalStorageService.setItem('userData', password);\n        console.log(password)\n        break;\n      case 'generate':\n        break;\n\n      default:\n        console.log('default')\n    }\n  };\n\n  render() {\n    return (\n        <form className=\"open\" onSubmit={this.onSubmit}>\n          <FormButtons onButtonChange={this.onButtonChange} buttons={['open', 'new', 'generate']}/>\n          <div className=\"open__pass-area\">\n            <div className=\"open__pass-field-wrap\">\n              <input className=\"open__pass-input\" name=\"password\" type=\"password\" size=\"30\" autoComplete=\"new-password\"\n                     maxLength=\"1024\" placeholder=\"Enter password\" readOnly=\"\" tabIndex=\"23\" required\n                     onChange={this.onChange}\n              />\n              <button className=\"open__pass-enter-btn\" tabIndex=\"24\" type=\"submit\">\n                <i className=\"fa fa-level-down rotate-90 open__pass-enter-btn-icon-enter\"></i>\n                <i className=\"fa fa-fingerprint open__pass-enter-btn-icon-touch-id\"></i>\n              </button>\n              {/*<div className=\"open__pass-opening-icon\">*/}\n              {/*  <i className=\"fa fa-spinner spin\"></i>*/}\n              {/*</div>*/}\n            </div>\n          </div>\n        </form>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    isAuthorized: state.userData.isAuthorized,\n    loading: state.userData.loading,\n    error: state.userData.error\n  }\n};\n\nconst mapDispatchToProps = {\n  signInRequest,\n  signInSuccess,\n  signInError\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginForm);\n","import {\n  SIGN_IN_REQUEST,\n  SIGN_IN_SUCCESS,\n  SIGN_IN_FAILURE,\n  SIGN_OUT\n} from './types';\n\nconst signInRequest = () => {\n  return {\n    type: SIGN_IN_REQUEST\n  }\n};\n\nconst signInSuccess = (user) => {\n  return {\n    type: SIGN_IN_SUCCESS,\n    payload: user\n  }\n};\n\nconst signInError = (error) => {\n  return {\n    type: SIGN_IN_FAILURE,\n    payload: error\n  };\n};\n\nconst userSignOut = () => {\n  return {\n    type: SIGN_OUT\n  }\n};\n\nexport {\n  signInRequest,\n  signInSuccess,\n  signInError,\n  userSignOut\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport { LoginForm } from '../LoginForm';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n\n    }\n  }\n\n  render() {\n    const { isAuthorized } = this.props;\n    return (\n      <div className=\"app__body\">\n        {isAuthorized ? <div>Hello</div> : <LoginForm />}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    isAuthorized: state.userData.isAuthorized,\n  }\n};\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  SIGN_IN_REQUEST,\n  SIGN_IN_SUCCESS,\n  SIGN_IN_FAILURE,\n  SIGN_OUT\n} from '../actions/signin/types';\n// import { LocalStorageService } from '../services';\n\nconst initialState = {\n  password: null,\n  isAuthorized: false,\n  loading: false,\n  error: null\n};\n\nexport const userData = (state, action) => {\n  if (state === undefined) {\n    return initialState\n    // if (localStorage.userData) {\n    //   return {\n    //     user: LocalStorageService.getItem('userData'),\n    //     isAuthorized: true\n    //   }\n    // } else {\n    //   return initialState\n    // }\n  }\n\n  const { type, payload } = action;\n  switch (type) {\n    case SIGN_IN_REQUEST:\n      return {\n        ...state,\n        loading: true,\n        error: null\n      };\n    case SIGN_IN_SUCCESS:\n      return {\n        ...state,\n        password: payload,\n        isAuthorized: true,\n        loading: false,\n        error: null\n      };\n    case SIGN_IN_FAILURE:\n      return {\n        ...initialState,\n        error: payload\n      };\n    case SIGN_OUT:\n      localStorage.clear();\n      return {\n        ...initialState\n      };\n\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport { userData } from './authorization';\n\nexport const reducer = combineReducers({\n  userData\n});\n","import { createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { reducer } from './reducers';\n\nexport const store = createStore(\n  reducer,\n  composeWithDevTools()\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport { Provider } from 'react-redux';\nimport App from './components/App/App';\nimport 'font-awesome/css/font-awesome.min.css';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n        <App />\n  </Provider>,\n  document.getElementById('app')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.register();\n"],"sourceRoot":""}